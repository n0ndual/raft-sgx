#include <stdarg.h>
#include <stdio.h>      /* vsnprintf */
#include "sgx_unsupported.h"
#include "Wolfssl_Enclave_t.h"

#include "Wolfssl_Enclave.h"

#include "raftee.h"
#include "https_server.h"

#include "sgx_trts.h"
#include <sgx_tae_service.h>
#include <sgx_tkey_exchange.h>
#include <sgx_tcrypto.h>
#include <sgx_thread.h>

#include "logging.h"

#include <wolfssl/wolfcrypt/sha512.h>
#include <wolfssl/wolfcrypt/ecc.h>
#include <wolfssl/certs_test.h>
#include "raft/raft.h"
#include "raft/raft_private.h"
#include "tpl/tpl.h"
#include "hashmap.h"

extern server_t* sv;

#define MAX_PEER_CONNECTIONS 128


#define RAFT_BUFLEN 512
#define LEADER_URL_LEN 512
#define IPC_PIPE_NAME "ticketd_ipc"
#define HTTP_WORKERS 4

#define WOLFSSL_USER_IO

WOLFSSL_CTX* server_ctx;
WOLFSSL_CTX* client_ctx;

char* cached_verify_buffer;
long sz_cached_verify_buffer;
static sgx_thread_mutex_t global_lock = SGX_THREAD_MUTEX_INITIALIZER;

time_t XTIME(time_t* timer){
  time_t time;
  ocall_time(&time, timer);
  return time;
}

static const sgx_ec256_public_t def_service_public_key = {
    {
        0x72, 0x12, 0x8a, 0x7a, 0x17, 0x52, 0x6e, 0xbf,
        0x85, 0xd0, 0x3a, 0x62, 0x37, 0x30, 0xae, 0xad,
        0x3e, 0x3d, 0xaa, 0xee, 0x9c, 0x60, 0x73, 0x1d,
        0xb0, 0x5b, 0xe8, 0x62, 0x1c, 0x4b, 0xeb, 0x38
    },
    {
        0xd4, 0x81, 0x40, 0xd9, 0x50, 0xe2, 0x57, 0x7b,
        0x26, 0xee, 0xb7, 0x41, 0xe7, 0xc6, 0x14, 0xe2,
        0x24, 0xb7, 0xbd, 0xc9, 0x03, 0xf2, 0x9a, 0x28,
        0xa8, 0x3c, 0xc8, 0x10, 0x11, 0x14, 0x5e, 0x06
    }

};

#define PSE_RETRIES	5	/* Arbitrary. Not too long, not too short. */

#if defined(XMALLOC_USER) || defined(XMALLOC_OVERRIDE)
    #warning verfication of heap hint pointers needed when overriding default malloc/free
#endif



#if defined(WOLFSSL_STATIC_MEMORY)
/* check on heap hint when used, aborts if pointer is not in Enclave.
 * In the default case where wolfSSL_Malloc is used the heap hint pointer is not
 * used.*/
static void checkHeapHint(WOLFSSL_CTX* ctx, WOLFSSL* ssl)
{
    WOLFSSL_HEAP_HINT* heap;
    if ((heap = (WOLFSSL_HEAP_HINT*)wolfSSL_CTX_GetHeap(ctx, ssl)) != NULL) {
        if(sgx_is_within_enclave(heap, sizeof(WOLFSSL_HEAP_HINT)) != 1)
            abort();
        if(sgx_is_within_enclave(heap->memory, sizeof(WOLFSSL_HEAP)) != 1)
            abort();
    }
}
static WOLFSSL_HEAP_HINT* HEAP_HINT;
#else
#define HEAP_HINT NULL
#endif /* WOLFSSL_STATIC_MEMORY */

void enc_wolfSSL_Debugging_ON(void)
{
    wolfSSL_Debugging_ON();
}

void enc_wolfSSL_Debugging_OFF(void)
{
    wolfSSL_Debugging_OFF();
}


int enc_wolfSSL_CTX_use_certificate_chain_buffer_format(WOLFSSL_CTX* ctx,
                                                        const unsigned char* buf, long sz, int type)
{
  if(sgx_is_within_enclave(ctx, wolfSSL_CTX_GetObjectSize()) != 1)
    abort();

#if defined(WOLFSSL_STATIC_MEMORY)
  checkHeapHint(ctx, NULL);
  #endif

  return wolfSSL_CTX_use_certificate_chain_buffer_format(ctx, buf, sz, type);

}

int enc_wolfSSL_CTX_use_certificate_buffer(WOLFSSL_CTX* ctx,
        const unsigned char* buf, long sz, int type)
{
    if(sgx_is_within_enclave(ctx, wolfSSL_CTX_GetObjectSize()) != 1)
        abort();

#if defined(WOLFSSL_STATIC_MEMORY)
    checkHeapHint(ctx, NULL);
#endif

    return wolfSSL_CTX_use_certificate_buffer(ctx, buf, sz, type);
}

int enc_wolfSSL_CTX_use_PrivateKey_buffer(WOLFSSL_CTX* ctx, const unsigned char* buf,
                                            long sz, int type)
{
    if(sgx_is_within_enclave(ctx, wolfSSL_CTX_GetObjectSize()) != 1)
        abort();

#if defined(WOLFSSL_STATIC_MEMORY)
    checkHeapHint(ctx, NULL);
#endif

    return wolfSSL_CTX_use_PrivateKey_buffer(ctx, buf, sz, type);
}

int enc_wolfSSL_CTX_gen_n_use_PrivateKey_buffer(WOLFSSL_CTX* ctx){
    if(sgx_is_within_enclave(ctx, wolfSSL_CTX_GetObjectSize()) != 1)
        abort();

#if defined(WOLFSSL_STATIC_MEMORY)
    checkHeapHint(ctx, NULL);
    HEAP_HINT = (WOLFSSL_HEAP_HINT*)wolfSSL_CTX_GetHeap(ctx, ssl);
#endif
    WC_RNG rng;
    ecc_key key;
    XMEMSET(&key, 0, sizeof(key));
    int ret = wc_InitRng_ex(&rng, HEAP_HINT, INVALID_DEVID);
    if (ret < 0) {
      abort();
    }
    ret = wc_ecc_init_ex(&key, HEAP_HINT, INVALID_DEVID);
    if (ret < 0) {
      abort();
    }
    Debug_enclave("begin make may\n");
    ret = wc_ecc_make_key(&rng, 32, &key);
    if (ret < 0) {
      abort();
    }
    Debug_enclave("make key done\n");
    unsigned char buf[121] = {0};
    ret = wc_EccKeyToDer(&key, buf, sizeof(key));
    //Debug_enclave("%02X", buf);
    return wolfSSL_CTX_use_PrivateKey_buffer(ctx, buf, sizeof(buf), SSL_FILETYPE_ASN1);
}

int enc_cache_verify_buffer(const unsigned char* in,
                                       long sz)
{
  //  Debug_enclave("verify buffer size:%ld\n", sz);
  sz_cached_verify_buffer = sz;
  cached_verify_buffer = (unsigned char*)malloc(sizeof(unsigned char) * sz);
  memcpy(cached_verify_buffer, in, sz);
  return 0;
}

int LowResTimer(void) /* low_res timer */
{
    int time;
    ocall_low_res_time(&time);
    return time;
}

int NBSend(WOLFSSL* ssl, char* buf, int sz, void* ctx){
  Debug_enclave("NBSend: %d\n",sz);
  tls_connection_t* tls_conn = (tls_connection_t*)ctx;
  if(tls_conn->len_buf_tcp_send > 0){
    // insecure
    memcpy(tls_conn->buf_tcp_send + tls_conn->len_buf_tcp_send, buf, sz);
    tls_conn->len_buf_tcp_send = tls_conn->len_buf_tcp_send + sz;
    return sz;
  }else{
    tls_conn->len_buf_tcp_send = sz;
    memcpy(tls_conn->buf_tcp_send, buf, sz);
    return sz;
  }
}

int NBRecv(WOLFSSL* ssl, char* buf, int sz, void* ctx){
  Debug_enclave("NBRecv want to read %d bytes\n", sz);
  tls_connection_t* tls_conn = (tls_connection_t*)ctx;
  if(tls_conn->len_buf_tcp_recv > 0 ){
    if(tls_conn->len_buf_tcp_recv <= sz){
      Debug_enclave("NBRecv read %d byte\n", tls_conn->len_buf_tcp_recv);
      memcpy(buf, tls_conn->buf_tcp_recv, tls_conn->len_buf_tcp_recv);
      int done = tls_conn->len_buf_tcp_recv;
      tls_conn->len_buf_tcp_recv =0;
      tls_conn->len_tcp_to_recv = sz - tls_conn->len_buf_tcp_recv;
      return done;
    }else{
      Error_enclave("fatal error\n\n");
    }
  }else{
    Debug_enclave("recv buf 0 bytes, want read: %d bytes\n", sz);
    tls_conn->len_tcp_to_recv = sz;
    return WOLFSSL_CBIO_ERR_WANT_READ;
  }
}

WOLFSSL_CTX* ecall_setup_wolfssl_ctx(void){

  wolfSSL_Init();
  wolfSSL_Debugging_OFF();
  if ((server_ctx = wolfSSL_CTX_new(wolfTLSv1_2_server_method())) == NULL) {
    Error_enclave("ERROR: failed to create WOLFSSL_CTX\n");
    return NULL;
  }

  wolfSSL_CTX_use_certificate_buffer(server_ctx,
                                                     server_cert_der_2048, sizeof_server_cert_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_CTX_use_PrivateKey_buffer(server_ctx,
                                                    server_key_der_2048, sizeof_server_key_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_CTX_load_verify_buffer(server_ctx, ca_cert_der_2048, sizeof_ca_cert_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_SetIORecv(server_ctx, NBRecv);
  wolfSSL_SetIOSend(server_ctx, NBSend);


  if ((client_ctx = wolfSSL_CTX_new(wolfTLSv1_2_client_method())) == NULL) {
    Error_enclave("ERROR: failed to create WOLFSSL_CTX\n");
    return NULL;
  }

  wolfSSL_CTX_use_certificate_buffer(client_ctx,
                                                     client_cert_der_2048, sizeof_client_cert_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_CTX_use_PrivateKey_buffer(client_ctx,
                                                    client_key_der_2048, sizeof_client_key_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_CTX_load_verify_buffer(client_ctx, ca_cert_der_2048, sizeof_ca_cert_der_2048, SSL_FILETYPE_ASN1);

  wolfSSL_SetIORecv(client_ctx, NBRecv);
  wolfSSL_SetIOSend(client_ctx, NBSend);

  return server_ctx;
}

int tls_send(tls_connection_t* tls_conn, char* msg, int len_msg){
  WOLFSSL* ssl = tls_conn->ssl;
  Debug_enclave("len of buf_tls_send that need to be flushed:%d\n", tls_conn->len_buf_tls_send);
  int new_len = tls_conn->len_buf_tls_send + len_msg;
  Debug_enclave("new_len: %d\n", new_len);
  //Debug_enclave("msg:%s\n", msg);
  Debug_enclave("old buf:%s\n",tls_conn->buf_tls_send + tls_conn->len_buf_tls_send);
  memcpy(tls_conn->buf_tls_send + tls_conn->len_buf_tls_send, msg, len_msg);
  Debug_enclave("memcpy ok\n");
  tls_conn->len_buf_tls_send = new_len;
  return new_len;
}

int flush_buf_tls_send(tls_connection_t* tls_conn){
  WOLFSSL* ssl = tls_conn->ssl;
  if(tls_conn->len_buf_tls_send>0){
    int ret = wolfSSL_write(tls_conn->ssl, tls_conn->buf_tls_send, tls_conn->len_buf_tls_send);
    if(ret == tls_conn->len_buf_tls_send){
      Debug_enclave("wolfssl flush all the bytes:%d\n", tls_conn->len_buf_tls_send);
      memset(tls_conn->buf_tls_send, '\0', 4096);
      tls_conn->len_buf_tls_send = 0;
    }else{
      Error_enclave("flush buf_tls_send, wolfssl_write failed:%d %d\n", ret, wolfSSL_get_error(tls_conn->ssl, ret));
    }
    return ret;
  }
}

int ecall_push_tcp(void* void_tls_conn, const unsigned char* buf_recv, long len_recv){
  int real_len = 0;
  tls_connection_t* tls_conn = (tls_connection_t*)void_tls_conn;
  Debug_enclave("%s, enclave recv tcp len: %d\n", tls_conn->id, len_recv);
  memcpy(tls_conn->buf_tcp_recv, buf_recv, len_recv);
  tls_conn->len_buf_tcp_recv = len_recv;
  Debug_enclave("%s, wolfssl need to read %d tcp bytes\n", tls_conn->id, tls_conn->len_tcp_to_recv);
  char buf_recv_tls[4096] = {'\0'};
  int ret = wolfSSL_read(tls_conn->ssl, buf_recv_tls, sizeof(buf_recv_tls));
  Debug_enclave("wolfssl_read ret: %d\n", ret);
  if(ret == -1){
    Error_enclave("wolfSSL_read error = %d\n", wolfSSL_get_error(tls_conn->ssl, ret));
  }
  if(ret >= 0){
     if(tls_conn->upper_layer_protocol == Raft_protocol){
       //       Debug_enclave("%s, read from raft_peer %d bytes, protocol: %d\n",
       //                     tls_conn->id, tls_conn->socket, Raft_protocol);
      tls_conn->len_tcp_to_recv=5;
      if(strcmp(buf_recv_tls, "I will speak to your warchief")==0){
        Debug_enclave("%s, receive test handshake\n", tls_conn->id);
        int ret = tls_send(tls_conn, "I speak for the horde", strlen("I speak for the horde")+1);
        if(ret == -1){
          Error_enclave("wolfssl_write:%d %d\n", ret, wolfSSL_get_error(tls_conn->ssl, ret));
        }
      }else{
        if(strcmp(buf_recv_tls, "I speak for the horde")==0){
          Warn_enclave("%s, test handshake done\n", tls_conn->id);
          if(strcmp(tls_conn->ip, "192.168.2.101") ==0){
            Debug_enclave("%s, send raft handshake msgs to leader\n", tls_conn->id);
            raft_connection_t* raft_conn = tls_conn->upper_layer;
            __send_handshake(raft_conn);
          }
        }else{
          Debug_enclave("handle raft messages:%d\n", ret);
          raft_connection_t* raft_conn = tls_conn->upper_layer;
          parse_raft(raft_conn, buf_recv_tls, ret);
        }
      }
    }else{
      Debug_enclave("read https request, bytes:%d, content:%s, protocol: %d\n", ret, buf_recv_tls, Https_protocol);
      Debug_enclave("peer ip: %s\n", tls_conn->ip);
      tls_conn->len_tcp_to_recv=5;

      ret = parse_https(buf_recv_tls, ret, tls_conn->upper_layer);
      Debug_enclave("parse_https ret: %d\n", ret);
      if(ret == -1){
        tls_conn->len_tcp_to_recv = 5;
      }else{
        tls_conn->len_tcp_to_recv = 0;
        //free(tls_conn);
      }
    }
  }
  return tls_conn->len_tcp_to_recv;
}

int ecall_pull_tcp(void* void_tls_conn,
                        unsigned char* buf_send, long out_sz){
  tls_connection_t* tls_conn = (tls_connection_t*)void_tls_conn;
  flush_buf_tls_send(tls_conn);
  Debug_enclave("%s, pull data:%d\n", tls_conn->id, tls_conn->len_buf_tcp_send);
  memcpy(buf_send, tls_conn->buf_tcp_send, out_sz);
  int ret = tls_conn->len_buf_tcp_send;
  memset(tls_conn->buf_tcp_send, '\0', 4096);
  tls_conn->len_buf_tcp_send = 0;
  return ret;
}

void* ecall_conn_new(WOLFSSL_CTX* ctx, char* ip, int sz,
                     int socket, int is_client, int protocol,
                     char* id, int id_sz){
  tls_connection_t* tls_conn = (tls_connection_t*)malloc(sizeof(tls_connection_t));
  tls_conn->socket = socket;
  tls_conn->buf_tcp_recv = malloc(4096*sizeof(unsigned char));
  tls_conn->buf_tcp_send = malloc(4096*sizeof(unsigned char));
  tls_conn->tls_established = 0;
  tls_conn->len_buf_tcp_recv = 0;
  tls_conn->len_tcp_to_recv = 0;
  tls_conn->len_buf_tcp_send = 0;
  tls_conn->buf_tls_send = malloc(4096*sizeof(char));
  tls_conn->len_buf_tls_send = 0;

  memset(tls_conn->ip,'\0',46);
  memcpy(tls_conn->ip, ip, sz);

  tls_conn->id = malloc(id_sz * sizeof(char*));
  memcpy(tls_conn->id, id, id_sz);

  WOLFSSL* ssl;
  if(is_client == 1){
    Warn_enclave("%s, peer is a client\n", tls_conn->id);
    if ((ssl = wolfSSL_new(server_ctx)) == NULL) {
      Error_enclave("ERROR: failed to create WOLFSSL object\n");
    }
  }else{
    if ((ssl = wolfSSL_new(client_ctx)) == NULL) {
      Warn_enclave("%s, peer is a server\n", tls_conn->id);
      Error_enclave("ERROR: failed to create WOLFSSL object\n");
    }
  }
  tls_conn->ssl = ssl;
  wolfSSL_SetIOWriteCtx(ssl, tls_conn);
  wolfSSL_SetIOReadCtx(ssl, tls_conn);

  tls_conn->upper_layer_protocol = protocol;
  if(protocol == Https_protocol){
    https_client_t* https_client = (https_client_t*)malloc(sizeof(https_client_t));
    https_client->tls_conn = tls_conn;
    tls_conn->upper_layer = https_client;

    // init https buffer and parser
    https_client->buf_tls = (char*) malloc((Buffer_size+1) * sizeof(char));
    memset(https_client->buf_tls, '\0', Buffer_size+1);
    https_client->len_tls = 0; //size_t
    https_client->size_tls = Buffer_size+1;
    https_client->len_tls_packages = 0;

    parser_cb_data *cb_data = malloc(sizeof(parser_cb_data));
    memset(cb_data, 0, sizeof(parser_cb_data));
    cb_data->come_on_baby = 1;

    http_parser *parser = malloc(sizeof(http_parser));
    http_parser_init(parser, HTTP_REQUEST); /* initialise parser */
    parser->data = cb_data;

    http_parser_settings* settings = malloc(sizeof(http_parser_settings)); /* set up callbacks */
    memset(settings, 0, sizeof(http_parser_settings));
    settings->on_message_complete = message_complete_cb;
    settings->on_body = body_cb;
    settings->on_url = url_cb;
    https_client->settings = settings;
    https_client->parser = parser;

    Warn_enclave("%s, new https conn created\n", tls_conn->id);
  }else{
    raft_connection_t* raft_peer = (raft_connection_t*)malloc(sizeof(raft_connection_t));
    raft_peer->tls_conn = tls_conn;

    raft_peer->gt = NULL;
    raft_peer->node = NULL;

    raft_peer->raft_port = 5555;
    raft_peer->http_port = 8888;

    raft_peer->n_expected_entries = 0;

    raft_peer->next = sv->conns;
    sv->conns = raft_peer;

    tls_conn->upper_layer = raft_peer;
    Warn_enclave("%s, new raft conn created, ip:%d\n", tls_conn->id, tls_conn->ip);
    if(is_client == 0){
      Debug_enclave("%s, peer is a server, so send hello\n", tls_conn->id);
      tls_send(tls_conn, "I will speak to your warchief", strlen("I will speak to your warchief")+1);
    }
  }
  return (void*) tls_conn;
}
