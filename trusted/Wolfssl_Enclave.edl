/* Benchmark_Enclave.edl - Top EDL file. */
enclave {
	include "wolfssl/ssl.h"
	include "wolfssl/wolfcrypt/settings.h"
	include "wolfssl/wolfcrypt/types.h"
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"
	from "sgx_tkey_exchange.edl" import *;
    trusted {

        public int enc_wolfSSL_CTX_use_PrivateKey_buffer([user_check] WOLFSSL_CTX* ctx,
							 [in, size=sz] const unsigned char* buf,
							 long sz,
							 int type);

        public int enc_wolfSSL_CTX_gen_n_use_PrivateKey_buffer([user_check] WOLFSSL_CTX* ctx);
        public int enc_wolfSSL_CTX_use_certificate_chain_buffer_format([user_check] WOLFSSL_CTX* ctx,
								       [in, size=sz] const unsigned char* buf,
								       long sz,
								       int type);
        public int enc_wolfSSL_CTX_use_certificate_buffer([user_check] WOLFSSL_CTX* ctx,
							  [in, size=sz] const unsigned char* buf,
							  long sz,
							  int type);
        public WOLFSSL_CTX* ecall_setup_wolfssl_ctx(void);
        public void* ecall_conn_new([user_check] WOLFSSL_CTX* ctx,
                                    [in, size=ip_sz]char* ip, int ip_sz,
                                    int socket, int is_client, int protocol,
                                    [in, size=id_sz]char* id, int id_sz);
        public int ecall_push_tcp([user_check]void* tls_conn,
                                       [in, size=in_sz]const unsigned char* buf_recv, long in_sz);
        public int ecall_pull_tcp([user_check]void* tls_conn,
                                       [out, size=out_sz]unsigned char* buf_send, long out_sz);
        public int ecall_raft_setup(void);
        public int ecall_raft_become_leader(void);
        public int ecall_raft_periodic(void);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print_string([in, string] const char* str);
        time_t ocall_time([user_check]time_t* timer);
        void ocall_low_res_time([out] int* time);
    };
};
