/* App.c
*
* Copyright (C) 2006-2016 wolfSSL Inc.
*
* This file is part of wolfSSL.
*
* wolfSSL is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* wolfSSL is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
*/


#include "stdafx.h"
#include "App.h" /* contains include of Enclave_u.h which has wolfSSL header files */
#include "logging.h"

/* Use Debug SGX ? */
#if _DEBUG
	#define DEBUG_VALUE SGX_DEBUG_FLAG
#else
	#define DEBUG_VALUE 1
#endif

/* the usual suspects */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

/* socket includes */
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <unistd.h>

#include <sgx_uae_service.h>
#include <sgx_ukey_exchange.h>

#include <libmill.h>

#include <wolfssl/certs_test.h>


coroutine void worker(int count, const char *text) {
  int i;
  for(i = 0; i != count; ++i) {
    printf("%s\n", text);
    msleep(now() + 10);
        
  }
  
}

int main(int argc, char* argv[]) /* not using since just testing w/ wc_test */
{
  go(worker(4, "a"));
  go(worker(2, "b"));
  go(worker(3, "c"));
  msleep(now() + 100);
  return 0;
}

void ocall_print_string(const char *str)
{
    /* Proxy/Bridge will check the length and null-terminate 
     * the input string to prevent buffer overflow. 
     */
  Ocall_printf("%s", str);
}

time_t ocall_time(time_t* timer){
  return time(timer);
}
void ocall_low_res_time(int* time)
{
    struct timeval tv;
    gettimeofday (&tv, NULL);
    if(!time) return;
    *time = tv.tv_sec;
    return;
}
